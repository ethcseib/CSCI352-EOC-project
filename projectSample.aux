\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Background}{1}{subsection.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Challenges}{1}{subsection.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Scope}{1}{section.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Requirements}{1}{subsection.2.1}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Use case table}}{2}{table.1}\protected@file@percent }
\newlabel{tab:useCaseIndex}{{1}{2}{Use case table}{table.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.1}Functional}{2}{subsubsection.2.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.2}Non-Functional}{2}{subsubsection.2.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Use Cases}{2}{subsection.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Interface Mockups}{3}{subsection.2.3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces The gameplay so far}}{3}{figure.1}\protected@file@percent }
\newlabel{gameplay_1}{{1}{3}{The gameplay so far}{figure.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces A layout of the Title Screen}}{4}{figure.2}\protected@file@percent }
\newlabel{TS}{{2}{4}{A layout of the Title Screen}{figure.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces A layout of the pause screen}}{4}{figure.3}\protected@file@percent }
\newlabel{PS}{{3}{4}{A layout of the pause screen}{figure.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Project Timeline}{4}{section.3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Project Structure}{5}{section.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}UML Outline}{5}{subsection.4.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces This is the current UML are using for our project. It is not finished for there may be a need to create another class for transferring into new levels. The Story class is how we plan to tell the story of the game. It is currently being developed. The PlayerMovement class is how the player moves throughout the game. The MoveFreely function allows the player to move around un- impeded. The functions with Restrict at the begining of the name restricts the player's movement in a direction that is defined at the end of the function name. The GenObstacle class is an abstract class that defines common functionality for all obstacles that will be used within the game. Individual obstacles such as: walls, doors, items and other characters inherit from GenObstacle to share in the functionality. Each obstacle has its own way the player will interact with it. For example the player can't walk through a wall. The Subject class defines common functionality for any derived class to inherit. The ItemCollection class inherits from the Subject class and works with the Inventory class. The Inventory and ItemCollection classes work together to form an observer and subject relationship. The ItemCollection class will collect an item obstacle when the player walks into an item and then send it to the Inventory class to be put into the player's inventory.}}{5}{figure.4}\protected@file@percent }
\newlabel{UML}{{4}{5}{This is the current UML are using for our project. It is not finished for there may be a need to create another class for transferring into new levels. The Story class is how we plan to tell the story of the game. It is currently being developed. The PlayerMovement class is how the player moves throughout the game. The MoveFreely function allows the player to move around un- impeded. The functions with Restrict at the begining of the name restricts the player's movement in a direction that is defined at the end of the function name. The GenObstacle class is an abstract class that defines common functionality for all obstacles that will be used within the game. Individual obstacles such as: walls, doors, items and other characters inherit from GenObstacle to share in the functionality. Each obstacle has its own way the player will interact with it. For example the player can't walk through a wall. The Subject class defines common functionality for any derived class to inherit. The ItemCollection class inherits from the Subject class and works with the Inventory class. The Inventory and ItemCollection classes work together to form an observer and subject relationship. The ItemCollection class will collect an item obstacle when the player walks into an item and then send it to the Inventory class to be put into the player's inventory}{figure.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Design Patterns Used}{5}{subsection.4.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5}Results}{5}{section.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Future Work}{6}{subsection.5.1}\protected@file@percent }
